import pandas as pd
import ta  # Library to calculate technical indicators

# Step 1: Load data from the CSV file
data = pd.read_csv('bitcoin-nupl-1.csv')

# Step 2: Convert the 'DateTime' column to datetime type
data['DateTime'] = pd.to_datetime(data['DateTime'])

# Step 3: Add the NUPL category
def categorize_nupl(nupl):
    if nupl <= 0.2:
        return 'Low'
    elif 0.2 < nupl <= 0.6:
        return 'Medium'
    else:
        return 'High'

data['NUPL Category'] = data['NUPL Value'].apply(categorize_nupl)

# Step 4: Calculate additional columns
# 14-day change
data['14-day chg'] = data['BTC price (NUPL)'].pct_change(periods=14) * 100

# Future price in 7 and 14 days
data['Future Price (7D)'] = data['BTC price (NUPL)'].shift(-7)
data['Future Price (14D)'] = data['BTC price (NUPL)'].shift(-14)

# Percentage change of future price over 7 and 14 days
data['Fut_Chg_7D'] = ((data['Future Price (7D)'] - data['BTC price (NUPL)']) / data['BTC price (NUPL)']) * 100
data['Fut_Chg_14D'] = ((data['Future Price (14D)'] - data['BTC price (NUPL)']) / data['BTC price (NUPL)']) * 100

# Volatility over 7, 14, and 21 days
data['Vol_7D'] = data['BTC price (NUPL)'].rolling(window=7).std()
data['Vol_14D'] = data['BTC price (NUPL)'].rolling(window=14).std()
data['Vol_21D'] = data['BTC price (NUPL)'].rolling(window=21).std()

# Moving averages over 7, 14, and 21 days
data['SMA_7'] = data['BTC price (NUPL)'].rolling(window=7).mean()
data['SMA_14'] = data['BTC price (NUPL)'].rolling(window=14).mean()
data['SMA_21'] = data['BTC price (NUPL)'].rolling(window=21).mean()

# RSI over 7, 14, and 21 days
data['RSI_7'] = ta.momentum.RSIIndicator(data['BTC price (NUPL)'], window=7).rsi()
data['RSI_14'] = ta.momentum.RSIIndicator(data['BTC price (NUPL)'], window=14).rsi()
data['RSI_21'] = ta.momentum.RSIIndicator(data['BTC price (NUPL)'], window=21).rsi()

# Remove NaN values generated by technical indicators
data.dropna(inplace=True)

# Round all numeric values to 3 decimal places
cols_to_round = ['14-day chg', 'Fut_Chg_7D', 'Fut_Chg_14D', 'Vol_7D', 'Vol_14D', 'Vol_21D', 'SMA_7', 'SMA_14', 'SMA_21', 'RSI_7', 'RSI_14', 'RSI_21']
data[cols_to_round] = data[cols_to_round].round(3)

# Step 5: Filter data for the range from 2025-03-01 to 2025-03-23
start_date = '2025-03-01'
end_date = '2025-03-23'
data_filtered = data[(data['DateTime'] >= start_date) & (data['DateTime'] <= end_date)]

# Step 6: Display the filtered data (future variable)
print(f"Filtered data from {start_date} to {end_date}:")
print(data_filtered[['DateTime', 'NUPL Value', 'NUPL Category', 'BTC price (NUPL)', '14-day chg',
                     'Fut_Chg_7D', 'Fut_Chg_14D', 'Vol_7D', 'Vol_14D', 'Vol_21D', 'SMA_7', 'SMA_14',
                     'SMA_21', 'RSI_7', 'RSI_14', 'RSI_21']])

# Step 7: Calculate the Pearson correlation matrix
correlation_matrix = data_filtered[['NUPL Value', 'BTC price (NUPL)', '14-day chg', 'Fut_Chg_7D', 'Fut_Chg_14D',
                                    'Vol_7D', 'Vol_14D', 'Vol_21D', 'SMA_7', 'SMA_14', 'SMA_21', 'RSI_7', 'RSI_14', 'RSI_21']].corr(method='pearson')

# Display the Pearson correlation matrix
print("\nPearson Correlation Matrix:")
print(correlation_matrix)

# Step 8: Descriptive statistics
print("\nDescriptive statistics:")
print(data_filtered[['NUPL Value', 'BTC price (NUPL)', '14-day chg', 'Fut_Chg_7D', 'Fut_Chg_14D',
                     'Vol_7D', 'Vol_14D', 'Vol_21D', 'SMA_7', 'SMA_14', 'SMA_21', 'RSI_7', 'RSI_14', 'RSI_21']].describe())

# Distribution of NUPL categories
print("\nDistribution of NUPL Categories:")
print(data_filtered['NUPL Category'].value_counts())

# Check for missing values
print("\nMissing values by column:")
print(data_filtered.isnull().sum())

# Step 9: Save the filtered data to a new CSV file
output_file = 'nupl_analysis_march_2025.csv'
data_filtered.to_csv(output_file, index=False)
print(f"\nFiltered data has been saved to '{output_file}'.")
